name: snapshots

on:
  schedule:
    - cron: "0 01 * * *" # Daily at 01:00 UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  activity-check:
    if: ${{ github.repository_owner == 'flamewing' }}
    runs-on: "ubuntu-latest"
    outputs:
      REPO_ALIVE: ${{ steps.activity.outputs.REPO_ALIVE }}
      build_id: ${{ steps.activity.outputs.build_id }}
      tag_name: ${{ steps.activity.outputs.tag_name }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Activity check
        id: activity
        shell: bash
        run: |
          DATEUTC=$(curl -sL https://api.github.com/repos/flamewing/asl-releases/commits | jq -r '[.[]][0]' | jq -r '.commit.committer.date')
          TIMESTAMP=$(date --utc -d "$DATEUTC" +%s)
          DAYS=$(( ($(date --utc +%s) - $TIMESTAMP) / 86400 ))
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            REPO_ALIVE=true
          else
            if [ $DAYS -gt 0 ]; then
              REPO_ALIVE=false
            else
              REPO_ALIVE=true
            fi
          fi
          build_id="v1.4.2.$(date --utc +'%Y%m%d')"
          tag_name="snapshot-${build_id}"
          echo "::set-output name=REPO_ALIVE::${REPO_ALIVE}"
          echo "::set-output name=build_id::${build_id}"
          echo "::set-output name=tag_name::${tag_name}"
          echo REPO_ALIVE=${REPO_ALIVE} >> $GITHUB_ENV
          echo BUILD_ID="${build_id}" >> $GITHUB_ENV
          echo TAG_NAME="${tag_name}" >> $GITHUB_ENV
      - name: Create release
        if: ${{ env.REPO_ALIVE == 'true' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: snapshot-${{ env.TAG_NAME }}
          release_name: Snapshot ${{ env.BUILD_ID }}
          draft: true
          prerelease: false
          body: "Snapshot build for ${{ env.BUILD_ID }}.\n\nThis is an automated snapshot build, not a stable release. For Apple Silicon binaries, please use the macOS ARM64 build."

  snapshots:
    needs:
      - activity-check
    if: ${{ github.repository_owner == 'flamewing' && needs.activity-check.outputs.REPO_ALIVE == 'true' }}
    strategy:
      matrix:
        architecture:
          - linux32
          - linux64
          - macos-x86_64
          - macos-arm64
          - win32
          - win64
        include:
          - architecture: linux32
            os: ubuntu-latest
            shell: bash
            arch: i686
            package: asl-ubuntu-i686
            p7zip: 7z
            exe_ext: ""
            as: asl
            depends: "gcc-multilib"
          - architecture: linux64
            os: ubuntu-latest
            shell: bash
            arch: x86_64
            package: asl-ubuntu-x86_64
            p7zip: 7z
            exe_ext: ""
            as: asl
          - architecture: macos-x86_64
            os: macos-13 # macos-13 is the last x86_64 version.
            shell: bash
            arch: x86_64
            package: asl-osx-x86_64
            p7zip: 7z
            exe_ext: ""
            as: asl
          - architecture: macos-arm64
            os: macos-latest # macos-latest is arm64.
            shell: bash
            arch: arm64
            package: asl-osx-arm64
            p7zip: 7z
            exe_ext: ""
            as: asl
          - architecture: win32
            os: windows-latest
            shell: msys2
            msystem: MINGW32
            arch: i686
            package: asl-windows-i686
            p7zip: "/c/Program Files/7-Zip/7z.exe"
            exe_ext: ".exe"
            as: asw
          - architecture: win64
            os: windows-latest
            shell: msys2
            msystem: MINGW64
            arch: x86_64
            package: asl-windows-x86_64
            p7zip: "/c/Program Files/7-Zip/7z.exe"
            exe_ext: ".exe"
            as: asw
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell }} {0}
    steps:
      - name: Install dependencies (Linux)
        if: ${{ matrix.architecture == 'linux32' || matrix.architecture == 'linux64' }}
        run: |
          if ! apt-fast -- help &> /dev/null; then
            sudo add-apt-repository -u -y ppa:apt-fast/stable
            sudo apt-get update
            echo debconf apt-fast/maxdownloads string 16 | sudo debconf-set-selections
            echo debconf apt-fast/dlflag boolean true | sudo debconf-set-selections
            echo debconf apt-fast/aptmanager string apt-get | sudo debconf-set-selections
            DEBIAN_FRONTEND=noninteractive sudo apt install -y apt-fast
          else
            sudo apt-fast update
          fi
          sudo apt-fast install -y libboost-all-dev ninja-build
      - name: Install dependencies (Mac OS)
        if: ${{ matrix.architecture == 'macos-x86_64' || matrix.architecture == 'macos-arm64' }}
        run: |
          brew update
          brew upgrade || true
          brew install cmake ninja
      - name: Install dependencies (Windows)
        if: ${{ matrix.architecture == 'win32' || matrix.architecture == 'win64' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: base-devel git
            mingw-w64-${{ matrix.arch }}-toolchain mingw-w64-${{ matrix.arch }}-binutils
            mingw-w64-${{ matrix.arch }}-cmake mingw-w64-${{ matrix.arch }}-ninja
      - name: Install Pandoc
        uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: "3.1.11"
      - name: Checkout code
        uses: actions/checkout@master
      - name: Configure
        env:
          MSYS2_PATH_TYPE: inherit
        run: |
          cmake -S . -B build -G Ninja
      - name: Build
        env:
          MSYS2_PATH_TYPE: inherit
        run: |
          cmake --build build -j
      - name: Create package
        run: |
          cp COPYING build/
          cd build
          "${{ matrix.p7zip }}" -tzip a ../${{ matrix.package }}-${{ needs.activity-check.outputs.build_id }}.zip -mx9 -mmt COPYING asl.html asl.odt *.msg {alink,dasl,p2bin,p2hex,pbind,plist}${{ matrix.exe_ext }} ${{ matrix.as }}${{ matrix.exe_ext }}
      - name: Upload snapshot
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.activity-check.outputs.upload_url }}
          asset_path: ${{ matrix.package }}-${{ needs.activity-check.outputs.build_id }}.zip
          asset_name: ${{ matrix.package }}-${{ needs.activity-check.outputs.build_id }}.zip
          asset_content_type: application/zip

  finish-release:
    needs:
      - activity-check
      - snapshots
    if: ${{ always() && github.repository_owner == 'flamewing' && needs.activity-check.outputs.REPO_ALIVE == 'true' }}
    runs-on: "ubuntu-latest"
    steps:
      - name: Finish release
        if: needs.snapshots.result == 'success'
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.activity-check.outputs.release_id }}
      - name: Rollback release
        if: needs.snapshots.result != 'success'
        uses: author/action-rollback@stable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.activity-check.outputs.release_id }}
          tag: ${{ needs.activity-check.outputs.tag_name }}
